- Phân tích:
	- phần Dashboard sẽ ẩn khi trượt playlist lên ==> phần Dashboard và playlist tách biệt ==> sử dụng position fix cho Dashboard và margin-top cho play-list.
	- các bước:
		- render songs. --> ok
		- Scroll top,	--> ok
		- play/pause/seek --> ok
        - Spin CD --> ok
        - Next/ Prev --> ok 
        - random --> ok
        - repeat --> ok
        - active song -->  ok
		- scroll song active --> ok	
		- click seleter song list --> ok
		- saved option --> ok


- thực hiện: 
	- render songs:
		- render theo hàm start (){ this.render}; ==> tat ca code va list nam trong hàm app;
	- scroll top:
		- kéo xuống thu nhỏ ==> phải lister được sự kiện kéo.
		- tạo hàm sử lý các sự kiện chung.
		- scroll: 
			- document.onscroll: sự kiện scroll toàn browser.
				-	window.scrollY : giá trị scroll theo trục y toàn của số trình duyệt.
				-	document.documentElement.scrollTop: giá trị scroll theo top
				-	sử dụng cả 2 bằng toán tử or (||) vì 1 số trình duyệt không hổ trợ.
			- lấy kích thước lấy kích thước của cd - scroll:
				- lấy kích thước cd qua offsetwidth rồi trừ cho scroll.
				- lấy style width của cd = giá trị offsetwidth - scroll;
				- chú ý là có trường hợp cuộn nhanh quá no tạo ra giá trị offsetwidth - scroll âm ==> k ẩn đc cd:
				- sử lý lỗi:
					- dùng: nếu > ? nó + 'px' : 0;
				- cho opacity nhỏ. khi cuộn 
	- lấy ra bài hát:
		- đầu tiên lấy ra bài hát đầu tiên:
		- tạo currenIndex: 0 ==> bài hiện tại.
		- có thể tạo hàm getra và gọi khi start nhưng có thể làm cách khác.
		- ĐỊNH NGHĨA deffineProperty:
			- gọi đến hàm this.definePropertys() trong start:
			- tạo defineProperties() trong app và tạo Object.defineProperty trong hàm defineProperties:
			- cứ mỗi Object.defineProperty là một phương thức mới được định dạng hoặc sửa lại.
			- Object.defineProperty(đối tượng cần thây đổi tạo mới methods, đặt tên, {object-define})
			- return bài hát hiện tại là bài đầu tiên.
	- load bài hát hiện tại.
		- start: gọi this.loadCurrentSong();
		- tạo loadCurrentSong trong app:
			- ở đây get ra các element cần xài,
			- tạo các element : const .....${....};
			- update content các thẻ: heading.textContent = this.currentSong.name;	// qua textContent
				- cdThumb.style.backgroundImage = `url('${this.currentSong.image}')`; // qua css nên dùng style;
				- audio.src = this.currentSong.path;									// qua attribute của element nên dùng dấu . thôi;
	- Play/pause/seek:
		- Play: dùng audio.play();
			- có css playing cùndg class player thì hiện icon playing.
			- bắt đầu lắng nghe nút play:
				playBtn.onclick = function....{	audio.play()}
		- pause:
			- đặt 1 property trong app mặc định là false ==> khi chạy là true.
			- khi play: đặt lại là true
			- chú ý k thể trỏ this vô function play vì nó nằm trong 1 function khác ==> dùng app hoặc _this = this
				- logit:
					onclick = () => if(app.isPlaying){ thì pause }else{ thì play};
				==> code thê logit sẽ xấu và kỳ cụt.
				- code:
					- sử dụng even play||pause (onplay|| onpause) của audio:
						- .omplay ==> add class và == true;
		- thanh Time line:
			- even timeupdate sự kiện thây đổi thời gian(.ontimeupdate)
			- giá trị: currentTime ==> giá trị thời gian hiện tại.
			- giá trị duration: thời lượng audio.
			- nhớ check giá trị duration vì ban đầu nó k có giá trị.
		- Seek:
			- sử lý tua bài.
			- dự vào : even onchange của  thanh Time line:
			- onchange: sự kiện xảy ra khi value của phần tử thay đổi.
			- lấy ra value ==> nó là % ==> đổi sang giây ((timeLine.value) * ((audio.duration)))/100
			==> gắn cho biến seekTime 
			==> gắn lại cho  audio.currentTime = seekTime
            - ngoai ra dung: oninput đẻ k bị bug khi tua bị tua ngượvc về trị trí chưa tua.
    - Spin CD: 
        - sử dụng Web Animations API(tạo).
        - Logit:
            - khi Play thì start Animations.
        - viết ra function sử lý Spin.
        - sử dụng animate(keyframes, options): keyframes == > cấu hình chuyển động; options ==> cách chuyển động;
            - sử lý trong handlEvents:
                cdThumb.animate([{transform: 'rotate(360deg)'}],{   
                                                            duration: 10000,      // spin 10 second
                                                            iterations: Infinity //loop vo hang})
                - transform: rotate ===> là css để quay tròn ==> giá trị 360deg ==> độ;
        khi function đó .pause()    ==> lúc đầu : không chạy
        ==> lắng nghe sự kiện play ==> thì cdThumbAnimation.play() 
        ==> lắng nghe sự kiện Pause ===> thì cdThumbAnimation.pause()
    - Next/ Prev:
        - ta có currenIndex là số hiện tại :
            ==> next là currenIndex++  ==> nếu index > = songs.leght thì về lại k
            ==> sau khi index tăng thì load currentSong tải bài mới.
        - tạo hàm trong handleven khi sự kiện next diễn ra thì chạy hàm next.
        ---> bug: đang play mà next thì: mất sourt ==> gọi lại play trong sự kiện next
        - đối với prev thì khi số < 0 thì nó về vị trí cuối index = là lenght - 1;
    - UPDATE: Next/ Prev:
        - pause() khi ở trạng thái pause
        - play() khi ở trạng thái play
    - Random:
        - gọi đến nut random.
        - even click btn random.
        - dùng toggle để add và remove classList active.
        - tạo đối tượng israndom = false ==> khi click btn: app.isRandom = !app.isRandom tức là thây đổi trạng thái của isRandom khi bị click
        - random.classList.toggle('active', app.isRandom) ==> được kích thoặc khi điều kiện là true.
        - LOGIT:
            - khi next/prev mà israndom = true thì random bài hát.
            - dùng Do/While:
                - do: random bài hát
                - While: điều kiện dừng khi bài random không giống bài cũ.
            - đặt biết lưu bài currentIndex hiện tại : currentIndexRandom
            - currentIndexRandom = Math.floor(Math.random() * this.songs.length) // lấy số nguyên với random nhỏ hơn lenght
            - while(currentIndexRandom == this.currenIndex) để điều kiện là nó random lại khi trúng bài vừa phát.
            - loop xong thì gắn lại giá trị cho currenIndex
            - load lại currentSong
            - ==> khi click vào Next/ Prev và event onended của audio mà app.israndom = true thì chạy hàm random
            - LOGIT:
                - khi onended(kết thúc bài) ==> isRepeat = true ? audio.play .
    - AutoNext:
        - audio.onended: ==> event kết thúc thời lượng đang phát.
    - ACTIVE SONG:
		- Logit:
			- add vào class: active khi render với đk index phần tử lập bằng currenIndex
			- tạo hàm sử lý hàm này tạo biến chứa array các element song
			- lập qua các element song xóa class active
			- tạo biến lấy ra phần tử trong mảng các element với index mảng đó trùng với currenIndex
			- từ biến đó gắn class : active cho element được lấy ra đó.
		- ở Render: trong .map(...,index) ==> class="song $ index === app.currentIndex ? "active" : ""}"
			==> index = index hiện tại gắn active k thì gắn class trống
		- hàm activeSong:
			- var loopSongs = $$('.song');
			- for lập để xóa active trong các ptử của loopSongs
			- const activeSong = loopSongs[this.currentIndex]
			- add : active cho activeSong
	- Scroll SONG:
		- LOGIT:
			- next xong ==> delay 300ms ==> kéo phần tử lên view.
			- áp dụng phương thức element: .scrollIntoView
		- gọi đến scrollActiveSong() trong hàm next/prev/random.
		- tạo hàm sử lý scrollActiveSong()
		- gọi đến thẻ .song.active
		- áp dụng scrollIntoView:
			- sử dụng Object parameter của scroll intro view:
				- từ element đó gọi đến .scrollIntoView()--> đưa về tầm nhìn ==> tuy nhiên ở các bài đầu có thể bị khuất do mặt định đưa về center.
				- scrollIntoViewOptions:
					- truyền vào 1 object:
						- behavior: "smooth", block: "center", inline: "center" 
						- behavior // chuyển động.
						- block: vị trí chiều dọc của element.
						- inline: vị trí chiều ngang của đối tượng.
					- sử lý khi ở index đầu thì cdThumb bị lỗi k hiện ra:
						- dùng if (this.currentIndex === 0) cho cdThumb scrollTop =0,
					dùng setTimeout để chuyển động mượt hơn	


	- CLICK SELETER SONG:
		- Logit:
			- có thể lắng nghe trên song theo id --> k thực tế.
			- tạo data-index khi render :  	data-index="${index}";
			- Sử dụng việc lick vào thẻ con hoặc chính thẻ playList:
			- Sử dụng: 
				- e.target ==> truy cập vào phần tử phát ra sự kiện thông qua đối tượng event.
				- e.target.closest():
					- trả về element chính nó hay thẻ cha của nó ==> k tìm thấy trả về null.
					- e.target.closest(.song) ==> trả về nếu nó là con của song.
					- e.target.closest(.song:not(.active))	==> nếu có class active thì loại ra.
					- sử lý trong bài nếu nó là song khổng phải active và hoặt nó option thì cho vào sử lý
						- NẾU song k phải active:
							- thì currenIndex = nó.getattribute.('data-index') || nó.dataset.index.
								- dataset.index cấp quyền truy cập bất cứ data-***..
							- getattribute lấy thuộc tính của thẻ.
	- saved option : lưu lại các lựa chọn như repeat hay random khi load lại trang.
		- Logit: Tạo ra setting phai tính trước vì có thể có nhiều setting.
			- Khai báo một key constants : Tức một giá trị không đổi - là một key - viết hoa : với giá trị bất kỳ.
			- tạo một setting trong app: với 2 options
				- dùng localstorage.getItem ==> truyền key vào kho dữ liệu
				- và dùng: || {} để mặt định nó là một object khi người dùng mới tải app.
			- config = JSON.pause //để conver to js (localstorage.getItem(tên key constent đã tạo))
				- trong đó localstorage là kho thông tin lưu trữ trong trình duyệt của người dùng (Không lưu trên server)
				- getItem : lấy ra item.
				- localstorage lưu dưới dạng một json.
			- tạo hàm lưu vào:
				- hàm setconfig:
					- có đối số : key và value.
					- call đến: this.config[key] = value. ==> để tạo key và value vào object.
					- localstorage.setItem(hàm key,  JSON.stringify(this.config)) 
						==> JSON.stringify để lưu vào bằng object vì localstorage chỉ lưu dữ liệu dạng chuỗi
			- handle event click:
				- app.setconfig('isRandom', this.setconfig)
			- khi f5 thì dữ liệu đã lưu vào localstorage  nhưng chưa log ra.
				==> viết hàm load ra data này.
			- function loadLocalConfig:
				- this.isRandom = this.config.isRandom
				......

				hoăc: 
				- Object.assign(this, this.config) ==> assign để hợp nhất this.config vào This
				- đã load được config nhưng chưa render ra view màng hình
				===> tạo hàm render ra:
					- với việc toggle  lại các class ở các đối tượn cần localstorage.
			- gọi đến hàm loadlocalconfig khi f5:
				- gọi ở start.

	- đọc thêm về localstorage: https://wiki.tino.org/localstorage-la-gi/





